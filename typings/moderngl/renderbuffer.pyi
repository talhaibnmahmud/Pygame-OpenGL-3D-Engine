"""
This type stub file was generated by pyright.
"""

__all__ = ['Renderbuffer']
class Renderbuffer:
    '''
        Renderbuffer objects are OpenGL objects that contain images.
        They are created and used specifically with :py:class:`Framebuffer` objects.
        They are optimized for use as render targets, while :py:class:`Texture` objects
        may not be, and are the logical choice when you do not need to sample
        from the produced image. If you need to resample, use Textures instead.
        Renderbuffer objects also natively accommodate multisampling.

        A Renderbuffer object cannot be instantiated directly, it requires a context.
        Use :py:meth:`Context.renderbuffer` or :py:meth:`Context.depth_renderbuffer`
        to create one.
    '''
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    @property
    def width(self) -> int:
        '''
            int: The width of the renderbuffer.
        '''
        ...
    
    @property
    def height(self) -> int:
        '''
            int: The height of the renderbuffer.
        '''
        ...
    
    @property
    def size(self) -> tuple:
        '''
            tuple: The size of the renderbuffer.
        '''
        ...
    
    @property
    def samples(self) -> int:
        '''
            int: The samples of the renderbuffer.
        '''
        ...
    
    @property
    def components(self) -> int:
        '''
            int: The components of the renderbuffer.
        '''
        ...
    
    @property
    def depth(self) -> bool:
        '''
            bool: Is the renderbuffer a depth renderbuffer?
        '''
        ...
    
    @property
    def dtype(self) -> str:
        '''
            str: Data type.
        '''
        ...
    
    @property
    def glo(self) -> int:
        '''
            int: The internal OpenGL object.
            This values is provided for debug purposes only.
        '''
        ...
    
    def release(self) -> None:
        '''
            Release the ModernGL object.
        '''
        ...
    


