"""
This type stub file was generated by pyright.
"""

from typing import Generator, Union
from .program_members import Attribute, Subroutine, Uniform, UniformBlock, Varying

__all__ = ['ComputeShader']
class ComputeShader:
    '''
        A Compute Shader is a Shader Stage that is used entirely for computing
        arbitrary information. While it can do rendering, it is generally used
        for tasks not directly related to drawing.

        - Compute shaders support uniforms are other member object just like a
          :py:class:`moderngl.Program`.
        - Storage buffers can be bound using :py:meth:`Buffer.bind_to_storage_buffer`.
        - Uniform buffers can be bound using :py:meth:`Buffer.bind_to_uniform_block`.
        - Images can be bound using :py:meth:`Texture.bind_to_image`.
    '''
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __eq__(self, other) -> bool:
        """Compares to compute shaders ensuring the internal opengl name/id is the same"""
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __getitem__(self, key) -> Union[Uniform, UniformBlock, Subroutine, Attribute, Varying]:
        """Get a member such as uniforms, uniform blocks, subroutines,
        attributes and varyings by name.

        .. code-block:: python

            # Get a uniform
            uniform = program['color']

            # Uniform values can be set on the returned object
            # or the `__setitem__` shortcut can be used.
            program['color'].value = 1.0, 1.0, 1.0, 1.0

            # Still when writing byte data we need to use the `write()` method
            program['color'].write(buffer)
        """
        ...
    
    def __setitem__(self, key, value): # -> None:
        """Set a value of uniform or uniform block

        .. code-block:: python

            # Set a vec4 uniform
            uniform['color'] = 1.0, 1.0, 1.0, 1.0

            # Optionally we can store references to a member and set the value directly
            uniform = program['color']
            uniform.value = 1.0, 0.0, 0.0, 0.0

            uniform = program['cameraMatrix']
            uniform.write(camera_matrix)
        """
        ...
    
    def __iter__(self) -> Generator[str, None, None]:
        """Yields the internal members names as strings.
        This includes all members such as uniforms, attributes etc.
        """
        ...
    
    @property
    def glo(self) -> int:
        '''
            int: The internal OpenGL object.
            This values is provided for debug purposes only.
        '''
        ...
    
    def run(self, group_x=..., group_y=..., group_z=...) -> None:
        '''
            Run the compute shader.

            Args:
                group_x (int): The number of work groups to be launched in the X dimension.
                group_y (int): The number of work groups to be launched in the Y dimension.
                group_z (int): The number of work groups to be launched in the Z dimension.
        '''
        ...
    
    def get(self, key, default) -> Union[Uniform, UniformBlock, Subroutine, Attribute, Varying]:
        '''
            Returns a Uniform, UniformBlock, Subroutine, Attribute or Varying.

            Args:
                default: This is the value to be returned in case key does not exist.

            Returns:
                :py:class:`Uniform`, :py:class:`UniformBlock`, :py:class:`Subroutine`,
                :py:class:`Attribute` or :py:class:`Varying`
        '''
        ...
    
    def release(self) -> None:
        '''
            Release the ModernGL object.
        '''
        ...
    


