"""
This type stub file was generated by pyright.
"""

from typing import Tuple

__all__ = ['VertexArray', 'POINTS', 'LINES', 'LINE_LOOP', 'LINE_STRIP', 'TRIANGLES', 'TRIANGLE_STRIP', 'TRIANGLE_FAN', 'LINES_ADJACENCY', 'LINE_STRIP_ADJACENCY', 'TRIANGLES_ADJACENCY', 'TRIANGLE_STRIP_ADJACENCY', 'PATCHES']
POINTS = ...
LINES = ...
LINE_LOOP = ...
LINE_STRIP = ...
TRIANGLES = ...
TRIANGLE_STRIP = ...
TRIANGLE_FAN = ...
LINES_ADJACENCY = ...
LINE_STRIP_ADJACENCY = ...
TRIANGLES_ADJACENCY = ...
TRIANGLE_STRIP_ADJACENCY = ...
PATCHES = ...
class VertexArray:
    '''
        A VertexArray object is an OpenGL object that stores all of the state
        needed to supply vertex data. It stores the format of the vertex data
        as well as the Buffer objects providing the vertex data arrays.

        In ModernGL, the VertexArray object also stores a reference
        for a :py:class:`Program` object, and some Subroutine information.

        A VertexArray object cannot be instantiated directly, it requires a context.
        Use :py:meth:`Context.vertex_array` or :py:meth:`Context.simple_vertex_array`
        to create one.
    '''
    __slots__ = ...
    def __init__(self) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    @property
    def program(self) -> Program:
        '''
            Program: The program assigned to the VertexArray.
            The program used when rendering or transforming primitives.
        '''
        ...
    
    @property
    def index_buffer(self) -> Buffer:
        '''
            Buffer: The index buffer if the index_buffer is set, otherwise ``None``.
        '''
        ...
    
    @property
    def index_element_size(self) -> int:
        '''
            int: The byte size of each element in the index buffer
        '''
        ...
    
    @property
    def vertices(self) -> int:
        '''
            int: The number of vertices detected.
            This is the minimum of the number of vertices possible per Buffer.
            The size of the index_buffer determines the number of vertices.
            Per instance vertex attributes does not affect this number.
        '''
        ...
    
    @vertices.setter
    def vertices(self, value): # -> None:
        ...
    
    @property
    def instances(self) -> int:
        """int: Get or set the number of instances to render"""
        ...
    
    @instances.setter
    def instances(self, value): # -> None:
        ...
    
    @property
    def subroutines(self) -> Tuple[int, ...]:
        '''
            tuple: The subroutines assigned to the VertexArray.
            The subroutines used when rendering or transforming primitives.
        '''
        ...
    
    @subroutines.setter
    def subroutines(self, value): # -> None:
        ...
    
    @property
    def glo(self) -> int:
        '''
            int: The internal OpenGL object.
            This values is provided for debug purposes only.
        '''
        ...
    
    def render(self, mode=..., vertices=..., *, first=..., instances=...) -> None:
        '''
            The render primitive (mode) must be the same as
            the input primitive of the GeometryShader.

            Args:
                mode (int): By default :py:data:`TRIANGLES` will be used.
                vertices (int): The number of vertices to transform.

            Keyword Args:
                first (int): The index of the first vertex to start with.
                instances (int): The number of instances.
        '''
        ...
    
    def render_indirect(self, buffer, mode=..., count=..., *, first=...) -> None:
        '''
            The render primitive (mode) must be the same as
            the input primitive of the GeometryShader.

            The draw commands are 5 integers: (count, instanceCount, firstIndex, baseVertex, baseInstance).

            Args:
                buffer (Buffer): Indirect drawing commands.
                mode (int): By default :py:data:`TRIANGLES` will be used.
                count (int): The number of draws.

            Keyword Args:
                first (int): The index of the first indirect draw command.
        '''
        ...
    
    def transform(self, buffer, mode=..., vertices=..., *, first=..., instances=..., buffer_offset=...) -> None:
        '''
            Transform vertices.
            Stores the output in a single buffer.
            The transform primitive (mode) must be the same as
            the input primitive of the GeometryShader.

            Args:
                buffer (Buffer): The buffer to store the output.
                mode (int): By default :py:data:`POINTS` will be used.
                vertices (int): The number of vertices to transform.

            Keyword Args:
                first (int): The index of the first vertex to start with.
                instances (int): The number of instances.
                buffer_offset (int): Byte offset for the output buffer
        '''
        ...
    
    def bind(self, attribute, cls, buffer, fmt, *, offset=..., stride=..., divisor=..., normalize=...) -> None:
        '''
            Bind individual attributes to buffers.

            Args:
                location (int): The attribute location.
                cls (str): The attribute class. Valid values are ``f``, ``i`` or ``d``.
                buffer (Buffer): The buffer.
                format (str): The buffer format.

            Keyword Args:
                offset (int): The offset.
                stride (int): The stride.
                divisor (int): The divisor.
                normalize (bool): The normalize parameter, if applicable.
        '''
        ...
    
    def release(self) -> None:
        '''
            Release the ModernGL object.
        '''
        ...
    


